---
- name: Local Host Execution Playbook
  hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    db_name: "testdb"
    db_user: "testuser"
    db_password: "testpassword"

  tasks:
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes
      become: yes

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - vim
          - jq
          - yq
          - git
          - apache2
          - mysql-server
          - php
          - libapache2-mod-php*
          - php-mysql
          - python3-pymysql
        state: present
      become: yes

    - name: Configure Apache to listen on port 8000
      ansible.builtin.lineinfile:
        path: /etc/apache2/ports.conf
        regexp: '^Listen 80'
        line: 'Listen 8000'
        state: present
      become: yes
      notify: Restart Apache

    - name: Update Apache virtual host to listen on port 8000
      ansible.builtin.lineinfile:
        path: /etc/apache2/sites-available/000-default.conf
        regexp: '^<VirtualHost \*:80>'
        line: '<VirtualHost *:8000>'
        state: present
      become: yes
      notify: Restart Apache

    - name: Allow traffic on port 8000
      ansible.builtin.ufw:
        rule: allow
        port: "8000"
        proto: tcp
      become: yes

    - name: Start and enable Apache service
      ansible.builtin.service:
        name: apache2
        state: started
        enabled: yes
      become: yes

    - name: Start and enable MySQL service
      ansible.builtin.service:
        name: mysql
        state: started
        enabled: yes
      become: yes

    - name: Create test database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: yes

    - name: Create test database user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "*.*:ALL"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present
      become: yes

    - name: Create test table
      mysql_query:
        login_db: "{{ db_name }}"
        query: |
          CREATE TABLE IF NOT EXISTS test_table (
            id INT AUTO_INCREMENT PRIMARY KEY,
            message VARCHAR(255) NOT NULL,
            timestamp VARCHAR(255)
          )
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: yes

    - name: Insert test record
      mysql_query:
        login_db: "{{ db_name }}"
        query: |
          INSERT INTO test_table (message, timestamp) VALUES ('Hello, LAMP!', NOW())
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: yes

    - name: Create test PHP file
      ansible.builtin.copy:
        dest: /var/www/html/test.php
        content: |
          <?php
          $servername = "localhost";
          $username = "{{ db_user }}";
          $password = "{{ db_password }}";
          $dbname = "{{ db_name }}";

          // Create connection
          $conn = new mysqli($servername, $username, $password, $dbname);

          // Check connection
          if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
          }

          // Insert a new record
          $insert_sql = "INSERT INTO test_table (message, timestamp) VALUES ('Page loaded', NOW())";
          if ($conn->query($insert_sql) === FALSE) {
            echo "Error: " . $insert_sql . "<br>" . $conn->error;
          }

          // Fetch and display records
          $sql = "SELECT id, message, timestamp FROM test_table ORDER BY timestamp DESC";
          $result = $conn->query($sql);

          if ($result->num_rows > 0) {
            // output data of each row
            while($row = $result->fetch_assoc()) {
              echo "ID: " . $row["id"]. " - Message: " . $row["message"]. " - Timestamp: " . $row["timestamp"]. "<br>\n";
            }
          } else {
            echo "0 results";
          }
          $conn->close();
          ?>
      become: yes

  handlers:
    - name: Restart Apache
      ansible.builtin.service:
        name: apache2
        state: restarted
      become: yes

